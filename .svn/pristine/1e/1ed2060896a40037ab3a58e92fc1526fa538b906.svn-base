package org.yonder.utils;

import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;
import org.yonder.entity.Address;
import org.yonder.entity.Person;

public class HibernateUtils {

//	private static final SessionFactory sessionFactory = buildSessionFactory();
	private static SessionFactory sessionFactory;
	
	private static SessionFactory buildSessionFactory() {
		try {
			if (sessionFactory == null) {
				// Load configuration and mappings
				Configuration configuration = new Configuration().configure();
				ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
						.applySettings(configuration.getProperties()).build();

				// Build a session factory from the service registry
				// As for Hibernate 4, this is the recommended way, 
				// as Configuration().configure().buildSessionFactory() is deprecated
				configuration.addAnnotatedClass(Person.class).addAnnotatedClass(Address.class);
				sessionFactory = configuration.buildSessionFactory(serviceRegistry);
			}
			return sessionFactory;
		//	return new Configuration().configure().buildSessionFactory();
		} catch (Throwable ex) {
			// Log the exception, as it might be swallowed
			System.err.println("Initial SessionFactory creation failed." + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory() {
		return buildSessionFactory();
	}

}
